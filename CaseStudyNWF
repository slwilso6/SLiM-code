initialize(){
	initializeSLiMModelType("nonWF");
	initializeTreeSeq();
	initializeMutationRate(1e-8);
	initializeMutationType("m1", 0.5, "f",0.0);
	m1.convertToSubstitution = F;
	initializeMutationType("m2", 0.5, "f",0.6);
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 0.4);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(0);}
	
1 early () { 
	sim.addSubpop("p1", 1); }
	
reproduction () { 
	subpop.addCloned(individual);
	subpop.addCloned(individual);}
early() { 
	targetSize = 100000; 
	popSize = p1.individualCount; 
	p1.fitnessScaling = targetSize / popSize;
	for (ind in p1.individuals) {
		if (ind.age >= 2) { // drops fitness of any individual older than 2 generations, this individual then gets cut out of the population 
			ind.fitnessScaling = 0.0;
		}
	}
}
 

// Assume mutation type m1 is already initialized in initialize()

// At generation 100, we'll tag a newborn with a mutation
38 late() {
    inds = p1.individuals;
    newborns = inds[inds.age == 0];

    if (size(newborns) > 0) {
        ind = sample(newborns, 1);

        // Pick a random genome (haplotype) to mutate: 0 or 1
        hapIndex = sample(0:1, 1);

        // Get the genome object
        genome = ind.haplosomes[hapIndex];

        // Add mutation at position 10000 with mutation type m1
        genome.addNewDrawnMutation(m2, 10000);
    }
}


81 late () { 
	sim.treeSeqOutput("./CaseStudy.tree");
	sim.simulationFinished();}
