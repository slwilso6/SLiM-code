initialize() { 
	initializeSLiMModelType("nonWF"); //switches SLiM model to nonWF
	initializeTreeSeq(); //begin tree sequence recording
	initializeMutationRate(0); // set mutation rate for neutral mutations to 0 (placeholder)
	initializeMutationType("m1", 0.5, "f", 0.0); // background neutral mutations
	initializeMutationType("m2", 0.5, "f", 0.6); // Beneficial mutation for later 
	m2.convertToSubstitution =F; //prevents beneficial mutation from converting into substitution in case of fixation 
	initializeGenomicElementType("g1", m1, 0.001); // builds chromosome elements, placeholder mutations set on chromosome to effectively leave it empty for beneficial mutation visualization 
	initializeGenomicElement(g1, 0, 99999);// sets chromosome length
	initializeRecombinationRate(0);}// 0 recombination rate for somatic mutations

1 early (){ 
	sim.addSubpop("p1", 1); // creates population 1 with 1 individual 

// create reproduction block 
reproduction(){
	subpop.addCloned(individual);
	subpop.addCloned(individual);} // if a beneficial mutation is present, cell replicates 
	
// population maintence
early () {
	targetSize = 150; // keeps population size ~ 100 individuals 
	popSize = p1.individualCount;
	p1.fitnessScaling = targetSize / popSize; 
	for (ind in p1.individuals) {
		if (ind.age >= 2) { // drops fitness of any individual older than 2 generations, this individual then gets cut out of the population 
			ind.fitnessScaling = 0.0;
			sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
		}
	}
}

10 late() {
	inds = p1.individuals; 
	newborns = inds[inds.age == 0]; //add an individual at 0 y/o to ensure you can add mutation 
	
	if (size(newborns) > 0){
		ind = sample(newborns, 1);
		
		hapIndex = sample(0:1, 1);
		
		genome = ind.haplosomes[hapIndex];
		genome.addNewDrawnMutation(m2, 10000); }
		}
		

//save tree output file 
100 late() {
	sim.treeSeqOutput("./S3.tree");
	sim.simulationFinished();}
	

	
